import React from 'react';

var useDebounce = function (data, interval) {
    var _a = React.useState(data), liveData = _a[0], setLiveData = _a[1];
    React.useEffect(function () {
        if (typeof window !== 'undefined') {
            var handler_1 = window.setTimeout(function () {
                setLiveData(data);
            }, interval);
            return function () {
                window.clearTimeout(handler_1);
            };
        }
    }, [data, interval]);
    return liveData;
};

var useAutosave = function (_a) {
    var data = _a.data, onSave = _a.onSave, _b = _a.interval, interval = _b === void 0 ? 2000 : _b;
    var valueOnCleanup = React.useRef(data);
    var initialRender = React.useRef(true);
    var debouncedValueToSave = useDebounce(data, interval);
    React.useEffect(function () {
        if (initialRender.current) {
            initialRender.current = false;
        }
        else if (debouncedValueToSave) {
            onSave(debouncedValueToSave);
        }
    }, [debouncedValueToSave, onSave]);
    React.useEffect(function () {
        valueOnCleanup.current = data;
    }, [data]);
    React.useEffect(function () {
        return function () {
            onSave(valueOnCleanup.current);
        };
    }, [onSave]);
};

var Autosave = function (_a) {
    var data = _a.data, onSave = _a.onSave, _b = _a.interval, interval = _b === void 0 ? 2000 : _b, _c = _a.element, element = _c === void 0 ? React.createElement(React.Fragment, null) : _c;
    useAutosave({ data: data, onSave: onSave, interval: interval });
    return element;
};

export { Autosave, useAutosave, useDebounce };
